% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Func-ContractTerm.R
\name{ct_Excess}
\alias{ct_Excess}
\alias{ct_LossParticipation}
\alias{ct_ProfitCommission}
\alias{ct_Commission}
\alias{ct_Reinstatement}
\title{Common contract terms as functionals}
\usage{
ct_Excess(
  Limit,
  Deductible,
  is.FranchiseLimit = FALSE,
  is.FranchiseDed = FALSE
)

ct_LossParticipation(Term, is.CedentPerspective = TRUE)

ct_ProfitCommission(Term, ExpenseAllowance)

ct_Commission(Term, right.closed = TRUE)

ct_Reinstatement(Term, Limit)
}
\arguments{
\item{Limit, Deductible}{Limit and Deductible terms}

\item{is.FranchiseLimit}{Logical, franchise limit means there is no reimbursement when LossAboveDeducible is greater than Limit}

\item{is.FranchiseDed}{Logical, franchise deductible means when Loss is greater than Deductible, full f.g.u. loss is applicable for reimbursement}

\item{Term}{See Details}

\item{is.CedentPerspective}{Logical}

\item{right.closed}{Logical, default to be TRUE.  RightBound inclusive}

\item{Loss, Premium}{Numeric vector for loss and premium}
}
\description{
\code{ct_Excess} calculates LossInLayer based on specified Limit and Deductible structure
\code{ct_Commission} calculates commission figures based on given sliding scale table
\code{ct_Reinstatement} returns a list of two vectors, one being reinstated loss and the other is reinstated premium
\code{ct_ProfitCommission} calculates profit commission
\code{ct_LossParcipation} calculates loss participation (i.e. loss corridor) from cedent's perspective
}
\section{\code{Term} parameter for different functions}{

\itemize{
\item Commission:  parameter \code{Term} can either be a value (for fixed commission), or a \code{data.frame} to lookup
\item LossParticipation: parameter \code{Term} is 3-column \code{data.frame}, with the sequence of \code{LowerLR}, \code{UpperLR} and \code{Participation}
\item ProfitCommission: parameter \code{Term} either a number a 3-column data.frame, each representing \code{LowerProfit}, \code{UpperProfit} and \code{ProfitShare}.
}
}

\examples{
## ct_Excess
ct_Excess(100, 200) ## Call `ct_Excess` returns a function
ct_Excess(100, 200)(c(250, 400))
## ct_LossParticipation
ct_LossParticipation(list(.8, Inf, .2))(c(.6, .9, 1)) ## a list, list(Low, High, LPC)
ct_LossParticipation(data.frame(c(0, .8, .9), c(.8, .9, Inf), c(0, .5, 0)))
## ct_ProfitCommission
ct_ProfitCommission(Term = .2, ExpenseAllowance = .2)(c(.8, .4, .2))
ct_ProfitCommission(Term = data.frame(c(0, .2), c(.2, Inf), c(.1, .5)), ExpenseAllowance = .2)(c(.8, .4, .2))
## ct_Commission
SS <- data.table::data.table(LowerLR = c(0, .15, .2, .25), UpperLR = c(.15, .2, .25, Inf), Commission = c(.3, .25, .2, .15))
ct_Commission(SS)(c(.19, .2, .21))
## ct_Reinstatement
ct_Reinstatement("2@100\%", 100)(c(50, 800))
ct_Reinstatement(c(1.2, 1), 100)(c(50, 800))

}
